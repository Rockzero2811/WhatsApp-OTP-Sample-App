#!/usr/bin/env python3

import json
import os
import textwrap

from enum import auto, Enum

import phonenumbers
import requests

# file where JSON output of setup script will be stored
FILENAME = "whatsapp-info.json"

# keys for JSON output
KEY_ACCESS_TOKEN = "access_token"
KEY_PHONE_NUMBER_ID = "phone_number_id"
KEY_TEMPLATE_ID = "template_id"
KEY_WABA_ID = "waba_id"


class Platform(Enum):
    Android = auto()
    iOS = auto()
    Both = auto()


class CodeSubmissionMethod(Enum):
    CopyCode = auto()
    OneTap = auto()


def input_option(options):
    for idx, option in enumerate(options):
        print(f"[{idx}]: {option}")

    selected_idx = None
    last_idx = len(options) - 1
    if last_idx < 0:
        return None

    prompt = f"Enter a number between {0} and {last_idx}: "
    while selected_idx is None:
        try:
            selected_idx = int(input(prompt))
        except (TypeError, ValueError):
            continue

        if selected_idx < 0 or selected_idx > last_idx:
            selected_idx = None

    return selected_idx


# Intro
print(
    "Welcome to the WhatsApp One-Time Password (OTP) Sample Application.\n"
    "This set-up script will help you get the starter code working for your "
    "business.\n"
)

print("Let's start by creating a new authentication message template.\n")

filepath = os.path.join(os.path.dirname(__file__), FILENAME)
previous_data = None
if os.path.isfile(filepath):
    with open(filepath, "r") as f:
        previous_data = json.load(f)
        print(f"Loaded existing {FILENAME}.\n")


# Collecting Business Info
print(
    "Please enter your WhatsApp Business Account (WABA) ID:\n"
    "(You can find the WABA ID at "
    "https://business.facebook.com/settings/whatsapp-business-accounts/)"
)
previous_waba_id = None
if previous_data is not None:
    previous_waba_id = previous_data.get(KEY_WABA_ID)
if previous_waba_id is not None:
    print(f"Leave blank to use the previously inputted WABA {previous_waba_id}.")
waba_id = input() or previous_waba_id

print()

print(
    "Please provide a System User access token linked to the business:\n"
    "(See https://www.facebook.com/business/help/503306463479099 for how to "
    "create a new System User and token. IMPORTANT: You must add the System "
    "User to the WABA and allow it to manage message templates, via "
    "https://business.facebook.com/settings/whatsapp-business-accounts/)"
)
previous_access_token = None
if previous_data is not None:
    previous_access_token = previous_data.get(KEY_ACCESS_TOKEN)
if previous_access_token is not None:
    print(
        "Leave blank to use the previously inputted access token "
        + previous_access_token
    )
access_token = input() or previous_access_token

print()

# Finding Phone Number ID
print(
    "Thank you. Calling WhatsApp API to check available phone numbers...\n"
    "IMPORTANT: You can generate a test phone number by following the "
    "instructions at https://developers.facebook.com/docs/whatsapp/cloud-api/get-started/#set-up-developer-assets "
    "which will allow you to send an unlimited number of messages to up to 5 "
    "recipient phone numbers. If you use the test phone number to send "
    "messages, you MUST verify each one following the instructions above.\n"
)
request_url = f"""https://graph.facebook.com/v16.0/{waba_id}/phone_numbers\
?access_token={access_token}"""

response = requests.get(request_url)
if (response.status_code != 200):
    print(
        "Error while checking available phone numbers. Your System User is "
        "likely missing permissions or not added to your WABA (please follow "
        "instructions in README."
    )
    print(f"Response status code: {response.status_code} - {response.reason}")
    error_response_json = json.dumps(response.json(), indent=4)
    print(f"Error details: {error_response_json}")
    exit()

phone_numbers_info = response.json()["data"]
if not phone_numbers_info:
    print(
        "Your WABA does not have any phone numbers associated with it. Please "
        "add one, by following the link above."
    )
    exit()

pretty_phone_numbers = []
for phone_number_info in phone_numbers_info:
    name = phone_number_info["verified_name"]
    phone_number = phone_number_info["display_phone_number"]
    pretty_phone_number = phonenumbers.format_number(
        phonenumbers.parse(f"+{phone_number}"),
        phonenumbers.PhoneNumberFormat.INTERNATIONAL,
    )
    pretty_phone_numbers.append(pretty_phone_number)

print(
    "Please select a phone number from the following list to use for sending "
    "test messages. Again, using the test phone number generated by WhatsApp "
    "is recommended to avoid charges.\n"
)
selected_phone_idx = input_option(pretty_phone_numbers)
phone_number_id = phone_numbers_info[selected_phone_idx]["id"]

print()

print("Please select which platform(s) you wish to test the sample app on.\n")
platforms = list(Platform)
platform_names = [platform.name for platform in platforms]
selected_platform_idx = input_option(platform_names)
platform = platforms[selected_platform_idx]

if platform == Platform.iOS:
    code_submission_method = CodeSubmissionMethod.CopyCode
else:
    print()

    method_labels = {
        CodeSubmissionMethod.CopyCode: (
            "Copy code: Customers tap the button to copy the code and then "
            "paste it in your app themselves."
        ),
        CodeSubmissionMethod.OneTap: (
            "One-tap autofill (recommended): Customers tap the button to fill "
            "the code on your app."
        ),
    }
    methods = list(CodeSubmissionMethod)
    method_names = [method_labels[method] for method in methods]
    print(
        (
            "Please select the code delivery method you would like to test "
            "on Android. (Note that iOS only supports 'Copy code' at present.)"
        )
    )
    selected_method_idx = input_option(method_names)
    code_submission_method = methods[selected_method_idx]

print()

default_template_name = (
    f"otp_{platform.name.lower()}_{code_submission_method.name.lower()}"
)
template_name = (
    input(
        "Please provide a name for your new authentication template:\n"
        f"(Leave blank to use the default name '{default_template_name}'.)\n"
    )
    or default_template_name
)

print()

if code_submission_method == CodeSubmissionMethod.CopyCode:
    button = {
        "type": "OTP",
        "otp_type": "COPY_CODE",
        "text": "Copy code",
    }
else:
    default_signature_hash = "K8a/AINcGX7"
    signature_hash = (
        input(
            "Please provide the app signature hash to use for the template:\n"
            f"(Leave blank to use the default '{default_signature_hash}' "
            "matching the dummy certificate included in the repository.)\n"
        )
        or default_signature_hash
    )
    button = {
        "type": "OTP",
        "otp_type": "ONE_TAP",
        "text": "Copy code",
        "autofill_text": "Autofill",
        "package_name": "com.whatsapp.otp.sample",
        "signature_hash": signature_hash,
    }

# Creating OTP Template
print("Thank you. Calling WhatsApp API to create OTP template...\n")
request_url = f"https://graph.facebook.com/v16.0/{waba_id}/message_templates"
payload = {
    "access_token": access_token,
    "name": template_name,
    "language": "en_US",
    "category": "AUTHENTICATION",
    "components": [
        {
            "type": "BODY",
            "add_security_recommendation": True,
        },
        {
            "type": "FOOTER",
            "code_expiration_minutes": 5,
        },
        {
            "type": "BUTTONS",
            "buttons": [button],
        },
    ],
}

response = requests.post(request_url, json=payload)
if response.status_code == 200:
    template_id = response.json()["id"]
    print(f"Your new template with ID {template_id} was just created.")

    with open(filepath, "w") as f:
        data = {
            KEY_WABA_ID: waba_id,
            KEY_ACCESS_TOKEN: access_token,
            KEY_PHONE_NUMBER_ID: phone_number_id,
            KEY_TEMPLATE_ID: template_id,
        }
        json.dump(data, f, indent=4)
elif response.status_code == 400:
    print("Template not created.\n")
    print(f"Response status code: {response.status_code} - {response.reason}")
    error_response_json = json.dumps(response.json(), indent=4)
    print(f"Error details: {error_response_json}")
else:
    print("Template not created:\n")
    print(response.status_code)
    print(response.reason)
